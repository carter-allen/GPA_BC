
R Under development (unstable) (2020-02-07 r77779) -- "Unsuffered Consequences"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "GPA"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('GPA')
Loading required package: Rcpp

Attaching package: ‘GPA’

The following object is masked from ‘package:stats’:

    cov

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("GPA-class")
> ### * GPA-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GPA-class
> ### Title: Class "GPA"
> ### Aliases: GPA-class show,GPA-method print,GPA-method fdr,GPA-method
> ###   cov,GPA-method estimates,GPA-method se,GPA-method fdr cov estimates
> ###   se
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("GPA")
Class "GPA" [package "GPA"]

Slots:
                                          
Name:       fit  setting gwasPval   annMat
Class:     list     list   matrix   matrix
> 
> # simulator function
> 
> simulator <- function( risk.ind, nsnp=20000, alpha=0.6 ) {
+   
+   m <- length(risk.ind)
+   
+   p.sig <- rbeta( m, alpha, 1 )
+   pvec <- runif(nsnp)
+   pvec[ risk.ind ] <- p.sig
+   
+   return(pvec)
+ }
> 
> # run simulation
> 
> set.seed(12345)
> nsnp <- 1000
> alpha <- 0.3
> pmat <- matrix( NA, nsnp, 5 )
> 
> pmat[,1] <- simulator( c(1:200), nsnp=nsnp, alpha=alpha )
> pmat[,2] <- simulator( c(51:250), nsnp=nsnp, alpha=alpha )
> pmat[,3] <- simulator( c(401:600), nsnp=nsnp, alpha=alpha )
> pmat[,4] <- simulator( c(451:750), nsnp=nsnp, alpha=alpha )
> pmat[,5] <- simulator( c(801:1000), nsnp=nsnp, alpha=alpha )
> 
> ann <- rbinom(n = nrow(pmat), size = 1, prob = 0.15)
> ann <- as.matrix(ann,ncol = 1)
> 
> fit.GPA.wAnn <- GPA( pmat, ann )
Info: Number of GWAS data: 5
Info: Number of annotation data: 1
Info: Theoretically null distribution is used.
Info: Annotation data is provided.
Info: SNPs will be prioritized using annotation data.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 1251-th iteration because there is no improvements in log likelihood.
> fit.GPA.wAnn
Summary: GPA model fitting results (class: GPA)
--------------------------------------------------
Data summary:
	Number of GWAS data: 5
	Number of SNPs: 1000
	Number of annotation data: 1
Model setting:
	Theoretical null distribution is assumed.
Parameter estimates (standard errors):
	alpha: 0.284 0.388 0.32 0.318 0.345
	     ( 0.034 0.048 0.044 0.034 0.046 )
	GWAS combination: 00000 10000 01000 11000 00100 10100 01100 11100 00010 10010 01010 11010 00110 10110 01110 11110 00001 10001 01001 11001 00101 10101 01101 11101 00011 10011 01011 11011 00111 10111 01111 11111
	pi: 0.147 0.004 0.064 0.177 0.09 0.003 0.001 0.001 0.124 0.001 0.019 0.001 0.103 0.001 0.001 0.001 0.2 0.017 0.019 0.004 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.012 0.001 0.001 0.001
	  ( 0.121 72.92 0.1 0.067 0.128 96.374 0.204 0.317 0.107 103.344 0.182 75.559 0.117 126.816 0.296 0.617 0.111 0.182 0.101 68.363 0.215 0.323 0.242 0.384 0.173 95.575 0.237 93.213 0.237 0.437 0.319 0.64 )
	q:
	Annotation #1:
	    0.001 0.999 0.148 0.107 0.269 0.999 0.001 0.001 0.197 0.999 0.001 0.999 0.158 0.999 0.001 0.001 0.2 0.001 0.051 0.999 0.001 0.001 0.001 0.001 0.001 0.999 0.001 0.999 0.001 0.001 0.001 0.001
	  ( 0.546 19.106 0.011 0.01 0.006 29.834 179.854 303.085 0.005 103.515 8.56 75.683 0.01 127.027 269.182 594.787 0.003 9.727 0.137 18.37 193.828 309.907 217.792 368.716 147.645 95.733 208.974 93.366 18.985 428.211 285.273 620.438 )

	Ratio of q over baseline (00000):
	GWAS combination: 10000 01000 11000 00100 10100 01100 11100 00010 10010 01010 11010 00110 10110 01110 11110 00001 10001 01001 11001 00101 10101 01101 11101 00011 10011 01011 11011 00111 10111 01111 11111
	Annotation #1:
	    999 147.936 106.807 269.188 999 1 1 196.991 999 1 999 158.484 999 1 1 199.809 1 50.874 999 1 1 1 1 1 999 1 999 1 1 1 1
	  ( 545415.261 80736.294 58276.569 146897.434 545838.977 179474.275 303427.391 107498.982 554678.325 8233.165 550528.892 86475.8 559399.861 269469.04 594519.543 109035.622 9373.227 27666.153 545647.816 193444.681 310235.398 218125.957 368406.781 147274.074 554359.593 209285.813 552455.19 19345.041 427908.589 284970.309 620711.075 )
--------------------------------------------------
> pp.GPA.wAnn <- print( fit.GPA.wAnn )
> fdr.GPA.wAnn <- fdr( fit.GPA.wAnn )
> fdr11.GPA.wAnn <- fdr( fit.GPA.wAnn, pattern="11" )
> fdr1..GPA.wAnn <- fdr( fit.GPA.wAnn, pattern="1*" )
> cov.GPA.wAnn <- cov( fit.GPA.wAnn )
 
alpha: 0.284 0.388 0.32 0.318 0.345
     ( 0.034 0.048 0.044 0.034 0.046 )
GWAS combination: 00000 10000 01000 11000 00100 10100 01100 11100 00010 10010 01010 11010 00110 10110 01110 11110 00001 10001 01001 11001 00101 10101 01101 11101 00011 10011 01011 11011 00111 10111 01111 11111
pi: 0.147 0.004 0.064 0.177 0.09 0.003 0.001 0.001 0.124 0.001 0.019 0.001 0.103 0.001 0.001 0.001 0.2 0.017 0.019 0.004 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.012 0.001 0.001 0.001
  ( 0.121 72.92 0.1 0.067 0.128 96.374 0.204 0.317 0.107 103.344 0.182 75.559 0.117 126.816 0.296 0.617 0.111 0.182 0.101 68.363 0.215 0.323 0.242 0.384 0.173 95.575 0.237 93.213 0.237 0.437 0.319 0.64 )
q: 
Annotation #1:
	    0.001 0.999 0.148 0.107 0.269 0.999 0.001 0.001 0.197 0.999 0.001 0.999 0.158 0.999 0.001 0.001 0.2 0.001 0.051 0.999 0.001 0.001 0.001 0.001 0.001 0.999 0.001 0.999 0.001 0.001 0.001 0.001
	  ( 0.546 19.106 0.011 0.01 0.006 29.834 179.854 303.085 0.005 103.515 8.56 75.683 0.01 127.027 269.182 594.787 0.003 9.727 0.137 18.37 193.828 309.907 217.792 368.716 147.645 95.733 208.974 93.366 18.985 428.211 285.273 620.438 )
 
Ratio of q over baseline (00000):
GWAS combination: 10000 01000 11000 00100 10100 01100 11100 00010 10010 01010 11010 00110 10110 01110 11110 00001 10001 01001 11001 00101 10101 01101 11101 00011 10011 01011 11011 00111 10111 01111 11111
Annotation #1:
	    999 147.936 106.807 269.188 999 1 1 196.991 999 1 999 158.484 999 1 1 199.809 1 50.874 999 1 1 1 1 1 999 1 999 1 1 1 1
	  ( 545415.261 80736.294 58276.569 146897.434 545838.977 179474.275 303427.391 107498.982 554678.325 8233.165 550528.892 86475.8 559399.861 269469.04 594519.543 109035.622 9373.227 27666.153 545647.816 193444.681 310235.398 218125.957 368406.781 147274.074 554359.593 209285.813 552455.19 19345.041 427908.589 284970.309 620711.075 )
> est.GPA.wAnn <- estimates( fit.GPA.wAnn )
> se.GPA.wAnn <- se( fit.GPA.wAnn )
> 
> 
> 
> 
> cleanEx()
> nameEx("GPA-package")
> ### * GPA-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GPA-package
> ### Title: GPA (Genetic analysis incorporating Pleiotropy and Annotation)
> ### Aliases: GPA-package
> ### Keywords: package
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # simulation setting
> ##D 
> ##D nBin <- 1000
> ##D pi1 <- 0.2
> ##D common <- 0.5
> ##D betaAlpha <- c( 0.6, 0.6 )
> ##D annP <- c( 0.2, 0.4, 0.4, 0.4 )
> ##D seed <- 12345
> ##D 
> ##D # simulation setting
> ##D 
> ##D nCommon <- round( pi1 * common * nBin )
> ##D nUniq <- round( pi1 * ( 1 - common ) * nBin )
> ##D nBg <- nBin - 2 * nUniq - nCommon
> ##D 
> ##D # M * K matrix of GWAS p-value
> ##D 
> ##D set.seed( seed )
> ##D 
> ##D pvec1 <- c( rbeta( nCommon, betaAlpha[1], 1 ), rbeta( nUniq, betaAlpha[1], 1 ), 
> ##D 	runif( nUniq ), runif( nBg ) )
> ##D pvec2 <- c( rbeta( nCommon, betaAlpha[2], 1 ), runif( nUniq ),
> ##D 	rbeta( nUniq, betaAlpha[2], 1 ), runif( nBg ) )
> ##D pmat <- cbind( pvec1, pvec2 )
> ##D 
> ##D # M * D matrix of annotation
> ##D  	
> ##D ann <- c( 
> ##D 	sample( c(1,0), nCommon, replace=TRUE, prob = c( annP[4], 1 - annP[4] ) ), 
> ##D 	sample( c(1,0), nUniq, replace=TRUE, prob = c( annP[2], 1 - annP[2] ) ),
> ##D 	sample( c(1,0), nUniq, replace=TRUE, prob = c( annP[3], 1 - annP[3] ) ),
> ##D 	sample( c(1,0), nBg, replace=TRUE, prob = c( annP[1], 1 - annP[1] ) ) )
> ##D 		
> ##D # GPA without annotation data
> ##D 
> ##D fit.GPA.noAnn <- GPA( pmat, NULL )
> ##D cov.GPA.noAnn <- cov( fit.GPA.noAnn )
> ##D 		
> ##D # GPA with annotation data
> ##D 
> ##D fit.GPA.wAnn <- GPA( pmat, ann )
> ##D cov.GPA.wAnn <- cov( fit.GPA.wAnn )
> ##D 
> ##D # GPA under pleiotropy H0
> ##D 
> ##D fit.GPA.pleiotropy.H0 <- GPA( pmat, NULL, pleiotropyH0=TRUE )
> ##D 
> ##D # association mapping
> ##D 
> ##D assoc.GPA.wAnn <- assoc( fit.GPA.wAnn, FDR=0.05, fdrControl="global" )
> ##D 
> ##D # hypothesis testing for pleiotropy
> ##D 
> ##D test.pleiotropy <- pTest( fit.GPA.noAnn, fit.GPA.pleiotropy.H0 )
> ##D 
> ##D # hypothesis testing for annotation enrichment
> ##D 
> ##D test.annotation <- aTest( fit.GPA.noAnn, fit.GPA.wAnn )
> ##D 
> ##D # simulator function
> ##D 
> ##D simulator <- function( risk.ind, nsnp=20000, alpha=0.6 ) {
> ##D   
> ##D   m <- length(risk.ind)
> ##D   
> ##D   p.sig <- rbeta( m, alpha, 1 )
> ##D   pvec <- runif(nsnp)
> ##D   pvec[ risk.ind ] <- p.sig
> ##D   
> ##D   return(pvec)
> ##D }
> ##D 
> ##D # run simulation
> ##D 
> ##D set.seed(12345)
> ##D nsnp <- 1000
> ##D alpha <- 0.4
> ##D pmat <- matrix( NA, nsnp, 5 )
> ##D 
> ##D pmat[,1] <- simulator( c(1:200), nsnp=nsnp, alpha=alpha )
> ##D pmat[,2] <- simulator( c(51:250), nsnp=nsnp, alpha=alpha )
> ##D pmat[,3] <- simulator( c(401:600), nsnp=nsnp, alpha=alpha )
> ##D pmat[,4] <- simulator( c(451:750), nsnp=nsnp, alpha=alpha )
> ##D pmat[,5] <- simulator( c(801:1000), nsnp=nsnp, alpha=alpha )
> ##D 
> ##D # Fit GPA for all possible pairs of GWAS datasets
> ##D 
> ##D out <- fitAll( pmat )
> ##D 
> ##D # Run the ShinyGPA app using the ouput from fitAll()
> ##D 
> ##D shinyGPA(out)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("GPA")
> ### * GPA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GPA
> ### Title: Fit GPA model
> ### Aliases: GPA
> ### Keywords: models methods
> 
> ### ** Examples
> 
> 
> # simulator function
> 
> simulator <- function( risk.ind, nsnp=20000, alpha=0.6 ) {
+   
+   m <- length(risk.ind)
+   
+   p.sig <- rbeta( m, alpha, 1 )
+   pvec <- runif(nsnp)
+   pvec[ risk.ind ] <- p.sig
+   
+   return(pvec)
+ }
> 
> # run simulation
> 
> set.seed(12345)
> nsnp <- 1000
> alpha <- 0.3
> pmat <- matrix( NA, nsnp, 5 )
> 
> pmat[,1] <- simulator( c(1:200), nsnp=nsnp, alpha=alpha )
> pmat[,2] <- simulator( c(51:250), nsnp=nsnp, alpha=alpha )
> pmat[,3] <- simulator( c(401:600), nsnp=nsnp, alpha=alpha )
> pmat[,4] <- simulator( c(451:750), nsnp=nsnp, alpha=alpha )
> pmat[,5] <- simulator( c(801:1000), nsnp=nsnp, alpha=alpha )
> 
> ann <- rbinom(n = nrow(pmat), size = 1, prob = 0.15)
> ann <- as.matrix(ann,ncol = 1)
> 
> # GPA without annotation data
> 
> fit.GPA.noAnn <- GPA( pmat, NULL )
Info: Number of GWAS data: 5
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 380-th iteration because there is no improvements in log likelihood.
> cov.GPA.noAnn <- cov( fit.GPA.noAnn )
 
alpha: 0.284 0.392 0.319 0.32 0.34
     ( 0.033 0.045 0.043 0.033 0.044 )
GWAS combination: 00000 10000 01000 11000 00100 10100 01100 11100 00010 10010 01010 11010 00110 10110 01110 11110 00001 10001 01001 11001 00101 10101 01101 11101 00011 10011 01011 11011 00111 10111 01111 11111
pi: 0.145 0.001 0.066 0.186 0.09 0.001 0.001 0.001 0.126 0.001 0.017 0.001 0.111 0.001 0.001 0.001 0.203 0.015 0.016 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.005 0.001 0.001 0.001
  ( 0.107 0.108 0.102 0.108 0.108 0.124 0.116 0.147 0.111 0.158 0.106 0.16 0.137 0.209 0.171 0.287 0.106 0.103 0.115 0.111 0.11 0.122 0.129 0.153 0.116 0.137 0.143 0.16 0.117 0.151 0.183 0.25 )
> 		
> # GPA with annotation data
> 
> fit.GPA.wAnn <- GPA( pmat, ann )
Info: Number of GWAS data: 5
Info: Number of annotation data: 1
Info: Theoretically null distribution is used.
Info: Annotation data is provided.
Info: SNPs will be prioritized using annotation data.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 1251-th iteration because there is no improvements in log likelihood.
> cov.GPA.wAnn <- cov( fit.GPA.wAnn )
 
alpha: 0.284 0.388 0.32 0.318 0.345
     ( 0.034 0.048 0.044 0.034 0.046 )
GWAS combination: 00000 10000 01000 11000 00100 10100 01100 11100 00010 10010 01010 11010 00110 10110 01110 11110 00001 10001 01001 11001 00101 10101 01101 11101 00011 10011 01011 11011 00111 10111 01111 11111
pi: 0.147 0.004 0.064 0.177 0.09 0.003 0.001 0.001 0.124 0.001 0.019 0.001 0.103 0.001 0.001 0.001 0.2 0.017 0.019 0.004 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.012 0.001 0.001 0.001
  ( 0.121 72.92 0.1 0.067 0.128 96.374 0.204 0.317 0.107 103.344 0.182 75.559 0.117 126.816 0.296 0.617 0.111 0.182 0.101 68.363 0.215 0.323 0.242 0.384 0.173 95.575 0.237 93.213 0.237 0.437 0.319 0.64 )
q: 
Annotation #1:
	    0.001 0.999 0.148 0.107 0.269 0.999 0.001 0.001 0.197 0.999 0.001 0.999 0.158 0.999 0.001 0.001 0.2 0.001 0.051 0.999 0.001 0.001 0.001 0.001 0.001 0.999 0.001 0.999 0.001 0.001 0.001 0.001
	  ( 0.546 19.106 0.011 0.01 0.006 29.834 179.854 303.085 0.005 103.515 8.56 75.683 0.01 127.027 269.182 594.787 0.003 9.727 0.137 18.37 193.828 309.907 217.792 368.716 147.645 95.733 208.974 93.366 18.985 428.211 285.273 620.438 )
 
Ratio of q over baseline (00000):
GWAS combination: 10000 01000 11000 00100 10100 01100 11100 00010 10010 01010 11010 00110 10110 01110 11110 00001 10001 01001 11001 00101 10101 01101 11101 00011 10011 01011 11011 00111 10111 01111 11111
Annotation #1:
	    999 147.936 106.807 269.188 999 1 1 196.991 999 1 999 158.484 999 1 1 199.809 1 50.874 999 1 1 1 1 1 999 1 999 1 1 1 1
	  ( 545415.261 80736.294 58276.569 146897.434 545838.977 179474.275 303427.391 107498.982 554678.325 8233.165 550528.892 86475.8 559399.861 269469.04 594519.543 109035.622 9373.227 27666.153 545647.816 193444.681 310235.398 218125.957 368406.781 147274.074 554359.593 209285.813 552455.19 19345.041 427908.589 284970.309 620711.075 )
> 
> # GPA under the null hypothesis of pleiotropy test
> 
> fit.GPA.pleiotropy.H0 <- GPA( pmat, NULL, pleiotropyH0=TRUE )
Info: Number of GWAS data: 5
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Fit the GPA model under H0 of the pleitropy test.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 144-th iteration because there is no improvements in log likelihood.
> 
> 
> 
> 
> cleanEx()
> nameEx("aTest")
> ### * aTest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aTest
> ### Title: Hypothesis testing for annotation enrichment
> ### Aliases: aTest
> ### Keywords: models methods
> 
> ### ** Examples
> 
> 
> # simulator function
> 
> simulator <- function( risk.ind, nsnp=20000, alpha=0.6 ) {
+   
+   m <- length(risk.ind)
+   
+   p.sig <- rbeta( m, alpha, 1 )
+   pvec <- runif(nsnp)
+   pvec[ risk.ind ] <- p.sig
+   
+   return(pvec)
+ }
> 
> # run simulation
> 
> set.seed(12345)
> nsnp <- 1000
> alpha <- 0.3
> pmat <- matrix( NA, nsnp, 5 )
> 
> pmat[,1] <- simulator( c(1:200), nsnp=nsnp, alpha=alpha )
> pmat[,2] <- simulator( c(51:250), nsnp=nsnp, alpha=alpha )
> pmat[,3] <- simulator( c(401:600), nsnp=nsnp, alpha=alpha )
> pmat[,4] <- simulator( c(451:750), nsnp=nsnp, alpha=alpha )
> pmat[,5] <- simulator( c(801:1000), nsnp=nsnp, alpha=alpha )
> 
> ann <- rbinom(n = nrow(pmat), size = 1, prob = 0.15)
> ann <- as.matrix(ann,ncol = 1)
> 
> # GPA without annotation data
> 
> fit.GPA.noAnn <- GPA( pmat, NULL )
Info: Number of GWAS data: 5
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 380-th iteration because there is no improvements in log likelihood.
> 		
> # GPA with annotation data
> 
> fit.GPA.wAnn <- GPA( pmat, ann )
Info: Number of GWAS data: 5
Info: Number of annotation data: 1
Info: Theoretically null distribution is used.
Info: Annotation data is provided.
Info: SNPs will be prioritized using annotation data.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 1251-th iteration because there is no improvements in log likelihood.
> 
> # hypothesis testing for annotation enrichment
> 
> test.annotation <- aTest( fit.GPA.noAnn, fit.GPA.wAnn )
Hypothesis testing for annotation enrichment
( Note: This version of test is designed for single annotation data )
--------------------------------------------------
q:
GWAS combination:  00000 10000 01000 11000 00100 10100 01100 11100 00010 10010 01010 11010 00110 10110 01110 11110 00001 10001 01001 11001 00101 10101 01101 11101 00011 10011 01011 11011 00111 10111 01111 11111 
Annotation # 1 :
     0.001 0.999 0.148 0.107 0.269 0.999 0.001 0.001 0.197 0.999 0.001 0.999 0.158 0.999 0.001 0.001 0.2 0.001 0.051 0.999 0.001 0.001 0.001 0.001 0.001 0.999 0.001 0.999 0.001 0.001 0.001 0.001 
  (  0.546 19.106 0.011 0.01 0.006 29.834 179.854 303.085 0.005 103.515 8.56 75.683 0.01 127.027 269.182 594.787 0.003 9.727 0.137 18.37 193.828 309.907 217.792 368.716 147.645 95.733 208.974 93.366 18.985 428.211 285.273 620.438  )

Ratio of q over baseline ( 00000 ):
GWAS combination:  10000 01000 11000 00100 10100 01100 11100 00010 10010 01010 11010 00110 10110 01110 11110 00001 10001 01001 11001 00101 10101 01101 11101 00011 10011 01011 11011 00111 10111 01111 11111 
Annotation # 1 :
     999 147.936 106.807 269.188 999 1 1 196.991 999 1 999 158.484 999 1 1 199.809 1 50.874 999 1 1 1 1 1 999 1 999 1 1 1 1 
  (  545415.261 80736.294 58276.569 146897.434 545838.977 179474.275 303427.391 107498.982 554678.325 8233.165 550528.892 86475.8 559399.861 269469.04 594519.543 109035.622 9373.227 27666.153 545647.816 193444.681 310235.398 218125.957 368406.781 147274.074 554359.593 209285.813 552455.19 19345.041 427908.589 284970.309 620711.075  )

test statistics:  6.176 
p-value:  0.9999996 
  --------------------------------------------------
> 
> 
> 
> 
> cleanEx()
> nameEx("assoc")
> ### * assoc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: assoc
> ### Title: Association mapping
> ### Aliases: assoc assoc,GPA-method
> ### Keywords: models methods
> 
> ### ** Examples
> 
> 
> # simulator function
> 
> simulator <- function( risk.ind, nsnp=20000, alpha=0.6 ) {
+   
+   m <- length(risk.ind)
+   
+   p.sig <- rbeta( m, alpha, 1 )
+   pvec <- runif(nsnp)
+   pvec[ risk.ind ] <- p.sig
+   
+   return(pvec)
+ }
> 
> # run simulation
> 
> set.seed(12345)
> nsnp <- 1000
> alpha <- 0.3
> pmat <- matrix( NA, nsnp, 5 )
> 
> pmat[,1] <- simulator( c(1:200), nsnp=nsnp, alpha=alpha )
> pmat[,2] <- simulator( c(51:250), nsnp=nsnp, alpha=alpha )
> pmat[,3] <- simulator( c(401:600), nsnp=nsnp, alpha=alpha )
> pmat[,4] <- simulator( c(451:750), nsnp=nsnp, alpha=alpha )
> pmat[,5] <- simulator( c(801:1000), nsnp=nsnp, alpha=alpha )
> 
> ann <- rbinom(n = nrow(pmat), size = 1, prob = 0.15)
> ann <- as.matrix(ann,ncol = 1)
> 
> fit.GPA.wAnn <- GPA( pmat, ann )
Info: Number of GWAS data: 5
Info: Number of annotation data: 1
Info: Theoretically null distribution is used.
Info: Annotation data is provided.
Info: SNPs will be prioritized using annotation data.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 1251-th iteration because there is no improvements in log likelihood.
> cov.GPA.wAnn <- cov( fit.GPA.wAnn )
 
alpha: 0.284 0.388 0.32 0.318 0.345
     ( 0.034 0.048 0.044 0.034 0.046 )
GWAS combination: 00000 10000 01000 11000 00100 10100 01100 11100 00010 10010 01010 11010 00110 10110 01110 11110 00001 10001 01001 11001 00101 10101 01101 11101 00011 10011 01011 11011 00111 10111 01111 11111
pi: 0.147 0.004 0.064 0.177 0.09 0.003 0.001 0.001 0.124 0.001 0.019 0.001 0.103 0.001 0.001 0.001 0.2 0.017 0.019 0.004 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.012 0.001 0.001 0.001
  ( 0.121 72.92 0.1 0.067 0.128 96.374 0.204 0.317 0.107 103.344 0.182 75.559 0.117 126.816 0.296 0.617 0.111 0.182 0.101 68.363 0.215 0.323 0.242 0.384 0.173 95.575 0.237 93.213 0.237 0.437 0.319 0.64 )
q: 
Annotation #1:
	    0.001 0.999 0.148 0.107 0.269 0.999 0.001 0.001 0.197 0.999 0.001 0.999 0.158 0.999 0.001 0.001 0.2 0.001 0.051 0.999 0.001 0.001 0.001 0.001 0.001 0.999 0.001 0.999 0.001 0.001 0.001 0.001
	  ( 0.546 19.106 0.011 0.01 0.006 29.834 179.854 303.085 0.005 103.515 8.56 75.683 0.01 127.027 269.182 594.787 0.003 9.727 0.137 18.37 193.828 309.907 217.792 368.716 147.645 95.733 208.974 93.366 18.985 428.211 285.273 620.438 )
 
Ratio of q over baseline (00000):
GWAS combination: 10000 01000 11000 00100 10100 01100 11100 00010 10010 01010 11010 00110 10110 01110 11110 00001 10001 01001 11001 00101 10101 01101 11101 00011 10011 01011 11011 00111 10111 01111 11111
Annotation #1:
	    999 147.936 106.807 269.188 999 1 1 196.991 999 1 999 158.484 999 1 1 199.809 1 50.874 999 1 1 1 1 1 999 1 999 1 1 1 1
	  ( 545415.261 80736.294 58276.569 146897.434 545838.977 179474.275 303427.391 107498.982 554678.325 8233.165 550528.892 86475.8 559399.861 269469.04 594519.543 109035.622 9373.227 27666.153 545647.816 193444.681 310235.398 218125.957 368406.781 147274.074 554359.593 209285.813 552455.19 19345.041 427908.589 284970.309 620711.075 )
> assoc.GPA.wAnn <- assoc( fit.GPA.wAnn, FDR=0.05, fdrControl="global" )
Info: Association mapping based on the global FDR control at level 0.05.
> 
> 
> 
> 
> cleanEx()
> nameEx("fitAll")
> ### * fitAll
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fitAll
> ### Title: Fit GPA model for all possible pairs of GWAS datasets
> ### Aliases: fitAll
> ### Keywords: models methods
> 
> ### ** Examples
> 
> 
> # simulator function
> 
> simulator <- function( risk.ind, nsnp=20000, alpha=0.6 ) {
+   
+   m <- length(risk.ind)
+   
+   p.sig <- rbeta( m, alpha, 1 )
+   pvec <- runif(nsnp)
+   pvec[ risk.ind ] <- p.sig
+   
+   return(pvec)
+ }
> 
> # run simulation
> 
> set.seed(12345)
> nsnp <- 10000
> alpha <- 0.4
> pmat <- matrix( NA, nsnp, 5 )
> 
> pmat[,1] <- simulator( c(1:2000), nsnp=nsnp, alpha=alpha )
> pmat[,2] <- simulator( c(501:2500), nsnp=nsnp, alpha=alpha )
> pmat[,3] <- simulator( c(4001:6000), nsnp=nsnp, alpha=alpha )
> pmat[,4] <- simulator( c(4501:7500), nsnp=nsnp, alpha=alpha )
> pmat[,5] <- simulator( c(8001:10000), nsnp=nsnp, alpha=alpha )
> 
> # Fit GPA for all possible pairs of GWAS datasets
> 
> out <- fitAll( pmat )
-------------------------------------------------------------
Fitting GPA for all possible combination of GWAS datasets...
-------------------------------------------------------------
	GWAS pair: 1 and 2
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 677-th iteration because there is no improvements in log likelihood.
	GWAS pair: 1 and 3
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 458-th iteration because there is no improvements in log likelihood.
	GWAS pair: 1 and 4
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 485-th iteration because there is no improvements in log likelihood.
	GWAS pair: 1 and 5
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 869-th iteration because there is no improvements in log likelihood.
	GWAS pair: 2 and 3
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 526-th iteration because there is no improvements in log likelihood.
	GWAS pair: 2 and 4
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops because it reaches the specified maximum number of iterations (maxIter = 2000).
	GWAS pair: 2 and 5
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 256-th iteration because there is no improvements in log likelihood.
	GWAS pair: 3 and 4
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 894-th iteration because there is no improvements in log likelihood.
	GWAS pair: 3 and 5
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 392-th iteration because there is no improvements in log likelihood.
	GWAS pair: 4 and 5
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 664-th iteration because there is no improvements in log likelihood.

Done!

-------------------------------------------------------------
Fitting GPA for all possible combination under H0...
-------------------------------------------------------------
Fit GPA for the GWAS 1 and 2
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Fit the GPA model under H0 of the pleitropy test.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 236-th iteration because there is no improvements in log likelihood.
Fit GPA for the GWAS 1 and 3
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Fit the GPA model under H0 of the pleitropy test.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 236-th iteration because there is no improvements in log likelihood.
Fit GPA for the GWAS 1 and 4
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Fit the GPA model under H0 of the pleitropy test.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 231-th iteration because there is no improvements in log likelihood.
Fit GPA for the GWAS 1 and 5
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Fit the GPA model under H0 of the pleitropy test.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 235-th iteration because there is no improvements in log likelihood.
Fit GPA for the GWAS 2 and 3
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Fit the GPA model under H0 of the pleitropy test.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 207-th iteration because there is no improvements in log likelihood.
Fit GPA for the GWAS 2 and 4
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Fit the GPA model under H0 of the pleitropy test.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 207-th iteration because there is no improvements in log likelihood.
Fit GPA for the GWAS 2 and 5
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Fit the GPA model under H0 of the pleitropy test.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 204-th iteration because there is no improvements in log likelihood.
Fit GPA for the GWAS 3 and 4
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Fit the GPA model under H0 of the pleitropy test.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 201-th iteration because there is no improvements in log likelihood.
Fit GPA for the GWAS 3 and 5
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Fit the GPA model under H0 of the pleitropy test.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 186-th iteration because there is no improvements in log likelihood.
Fit GPA for the GWAS 4 and 5
Info: Number of GWAS data: 2
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Fit the GPA model under H0 of the pleitropy test.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 198-th iteration because there is no improvements in log likelihood.

Done!

-------------------------------------------------------------
Calculating pleiotropy test p-values...
-------------------------------------------------------------
Done!
> 
> # Run the ShinyGPA app using the ouput from fitAll()
> 
> # shinyGPA(out)
> 
> 
> 
> 
> cleanEx()
> nameEx("pTest")
> ### * pTest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pTest
> ### Title: Hypothesis testing for pleiotropy
> ### Aliases: pTest
> ### Keywords: models methods
> 
> ### ** Examples
> 
> 
> # simulator function
> 
> simulator <- function( risk.ind, nsnp=20000, alpha=0.6 ) {
+   
+   m <- length(risk.ind)
+   
+   p.sig <- rbeta( m, alpha, 1 )
+   pvec <- runif(nsnp)
+   pvec[ risk.ind ] <- p.sig
+   
+   return(pvec)
+ }
> 
> # run simulation
> 
> set.seed(12345)
> nsnp <- 1000
> alpha <- 0.3
> pmat <- matrix( NA, nsnp, 5 )
> 
> pmat[,1] <- simulator( c(1:200), nsnp=nsnp, alpha=alpha )
> pmat[,2] <- simulator( c(51:250), nsnp=nsnp, alpha=alpha )
> pmat[,3] <- simulator( c(401:600), nsnp=nsnp, alpha=alpha )
> pmat[,4] <- simulator( c(451:750), nsnp=nsnp, alpha=alpha )
> pmat[,5] <- simulator( c(801:1000), nsnp=nsnp, alpha=alpha )
> 
> # GPA without annotation data
> 
> fit.GPA.noAnn <- GPA( pmat, NULL )
Info: Number of GWAS data: 5
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 380-th iteration because there is no improvements in log likelihood.
> 
> # GPA under the null hypothesis of pleiotropy test
> 
> fit.GPA.pleiotropy.H0 <- GPA( pmat, NULL, pleiotropyH0=TRUE )
Info: Number of GWAS data: 5
Info: Theoretically null distribution is used.
Info: No annotation data is provided.
Info: Fit the GPA model under H0 of the pleitropy test.
Info: Lower bound for pi estimates is set to 1 / [number of SNPs].
Info: EM algorithm stops in 144-th iteration because there is no improvements in log likelihood.
> 
> # hypothesis testing for pleiotropy
> 
> test.pleiotropy <- pTest( fit.GPA.noAnn, fit.GPA.pleiotropy.H0 )
Hypothesis testing for pleiotropy
--------------------------------------------------
GWAS combination:  00000 10000 01000 11000 00100 10100 01100 11100 00010 10010 01010 11010 00110 10110 01110 11110 00001 10001 01001 11001 00101 10101 01101 11101 00011 10011 01011 11011 00111 10111 01111 11111 
pi:  0.145 0.001 0.066 0.186 0.09 0.001 0.001 0.001 0.126 0.001 0.017 0.001 0.111 0.001 0.001 0.001 0.203 0.015 0.016 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.005 0.001 0.001 0.001 
  (  0.107 0.108 0.102 0.108 0.108 0.124 0.116 0.147 0.111 0.158 0.106 0.16 0.137 0.209 0.171 0.287 0.106 0.103 0.115 0.111 0.11 0.122 0.129 0.153 0.116 0.137 0.143 0.16 0.117 0.151 0.183 0.25  )

test statistics:  77.517 
p-value:  1.316032e-18 
  --------------------------------------------------
> 
> 
> 
> 
> cleanEx()
> nameEx("shinyGPA")
> ### * shinyGPA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shinyGPA
> ### Title: Run ShinyGPA app
> ### Aliases: shinyGPA
> ### Keywords: models methods
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # simulator function
> ##D 
> ##D simulator <- function( risk.ind, nsnp=20000, alpha=0.6 ) {
> ##D   
> ##D   m <- length(risk.ind)
> ##D   
> ##D   p.sig <- rbeta( m, alpha, 1 )
> ##D   pvec <- runif(nsnp)
> ##D   pvec[ risk.ind ] <- p.sig
> ##D   
> ##D   return(pvec)
> ##D }
> ##D 
> ##D # run simulation
> ##D 
> ##D set.seed(12345)
> ##D nsnp <- 1000
> ##D alpha <- 0.3
> ##D pmat <- matrix( NA, nsnp, 5 )
> ##D 
> ##D pmat[,1] <- simulator( c(1:200), nsnp=nsnp, alpha=alpha )
> ##D pmat[,2] <- simulator( c(51:250), nsnp=nsnp, alpha=alpha )
> ##D pmat[,3] <- simulator( c(401:600), nsnp=nsnp, alpha=alpha )
> ##D pmat[,4] <- simulator( c(451:750), nsnp=nsnp, alpha=alpha )
> ##D pmat[,5] <- simulator( c(801:1000), nsnp=nsnp, alpha=alpha )
> ##D 
> ##D # Fit GPA for all possible pairs of GWAS datasets
> ##D 
> ##D out <- fitAll( pmat )
> ##D 
> ##D # Run the ShinyGPA app using the ouput from fitAll()
> ##D 
> ##D shinyGPA(out)
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  24.832 0.096 25.025 0.002 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
