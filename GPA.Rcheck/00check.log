* using log directory ‘/home/carterallen/Documents/rdev/GPA_BC/GPA.Rcheck’
* using R Under development (unstable) (2020-02-07 r77779)
* using platform: x86_64-pc-linux-gnu (64-bit)
* using session charset: UTF-8
* checking for file ‘GPA/DESCRIPTION’ ... OK
* checking extension type ... Package
* this is package ‘GPA’ version ‘1.1-0’
* checking package namespace information ... OK
* checking package dependencies ... NOTE
Depends: includes the non-default packages:
  'Rcpp', 'parallel', 'ggplot2', 'ggrepel', 'plyr', 'vegan', 'DT',
  'shiny', 'shinyBS'
Adding so many packages to the search path is excessive and importing
selectively is preferable.
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘GPA’ can be installed ... OK
* checking installed package size ... OK
* checking package directory ... OK
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking dependencies in R code ... NOTE
Packages in Depends field not imported from:
  ‘DT’ ‘plyr’
  These packages need to be imported from (in the NAMESPACE file)
  for when this namespace is loaded but not attached.
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... NOTE
aTest: no visible global function definition for ‘dbeta’
aTest: no visible global function definition for ‘pchisq’
fitAll: no visible global function definition for ‘combn’
fitAll : <anonymous>: no visible global function definition for
  ‘pchisq’
pTest: no visible global function definition for ‘pchisq’
shinyGPA : server : plotInput: no visible global function definition
  for ‘palette’
shinyGPA : server : plotInput: no visible global function definition
  for ‘kmeans’
shinyGPA : server : plotInput: no visible global function definition
  for ‘dist’
shinyGPA : server : plotInput: no visible global function definition
  for ‘cutree’
shinyGPA : server : plotInput: no visible global function definition
  for ‘hclust’
shinyGPA : server : plotInput: no visible binding for global variable
  ‘PC1’
shinyGPA : server : plotInput: no visible binding for global variable
  ‘PC2’
shinyGPA : server: no visible global function definition for ‘str’
shinyGPA : server : <anonymous>: no visible global function definition
  for ‘pdf’
shinyGPA : server : <anonymous>: no visible global function definition
  for ‘dev.off’
Undefined global functions or variables:
  PC1 PC2 combn cutree dbeta dev.off dist hclust kmeans palette pchisq
  pdf str
Consider adding
  importFrom("grDevices", "dev.off", "palette", "pdf")
  importFrom("stats", "cutree", "dbeta", "dist", "hclust", "kmeans",
             "pchisq")
  importFrom("utils", "combn", "str")
to your NAMESPACE file.
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking line endings in C/C++/Fortran sources/headers ... OK
* checking line endings in Makefiles ... OK
* checking compilation flags in Makevars ... OK
* checking for GNU extensions in Makefiles ... WARNING
Found the following file(s) containing GNU extensions:
  src/Makevars
Portable Makefiles do not use GNU extensions such as +=, :=, $(shell),
$(wildcard), ifeq ... endif, .NOTPARALLEL See section ‘Writing portable
packages’ in the ‘Writing R Extensions’ manual.
* checking for portable use of $(BLAS_LIBS) and $(LAPACK_LIBS) ... OK
* checking use of PKG_*FLAGS in Makefiles ... OK
* checking compiled code ... OK
* checking installed files from ‘inst/doc’ ... OK
* checking files in ‘vignettes’ ... OK
* checking examples ... ERROR
Running examples in ‘GPA-Ex.R’ failed
The error most likely occurred in:

> ### Name: GPA-class
> ### Title: Class "GPA"
> ### Aliases: GPA-class show,GPA-method print,GPA-method fdr,GPA-method
> ###   cov,GPA-method estimates,GPA-method se,GPA-method fdr cov estimates
> ###   se
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("GPA")
Class "GPA" [package "GPA"]

Slots:
                                          
Name:       fit  setting gwasPval   annMat
Class:     list     list   matrix   matrix
> 
> fit.GPA.wAnn <- GPA( pmat, ann )
Error in GPA(pmat, ann) : object 'pmat' not found
Execution halted
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes in ‘inst/doc’ ... OK
* checking running R code from vignettes ... OK
  ‘GPA-example.Rnw’... OK
* checking re-building of vignette outputs ... OK
* checking PDF version of manual ... OK
* DONE
Status: 1 ERROR, 1 WARNING, 3 NOTEs
